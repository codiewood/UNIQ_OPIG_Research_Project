#!/usr/bin/env python
# coding: utf-8

# In[2]:

import gzip, json, re, sys
from collections import Counter
import pandas as pd

oas_file = str(sys.argv[1])
#oas_file = "Vander_Heiden_2017_Heavy_HD09_IGHG_HD09_Unsorted_Bcells_age31_healthy_iglblastn_igblastn_IGHG.json.gz"

meta_line = True
sequence_data = []
for line in gzip.open(oas_file, 'rb'):
    if meta_line == True:
        metadata = json.loads(line)
        meta_line = False
        continue
    
    #Parse actual sequence data.
    basic_data = json.loads(line)
    sequence_data.append(basic_data)
    
    #IMGT-Numbered sequence.
    d = json.loads(basic_data['data'])
    sequence_data[-1]['data'] = d
    
#%%

def maximum_valued_key(dictionary):
    values = list(dictionary.values())
    keys = list(dictionary.keys())
    return keys[values.index(max(values))]

def sort_alphanumerically(l): 
    convert = lambda text: int(text) if text.isdigit() else text.lower() 
    alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ] 
    return sorted(l, key = alphanum_key)

    
# In[7]:

redundant_sequences = metadata['Size']

def combine_regions(data):
    regions = ['fwh1','cdrh1','fwh2','cdrh2','fwh3','cdrh3','fwh4']
    combined_sequence = {}
    for region_name in regions:
        region_sequence = data['data'][region_name]
        combined_sequence.update(region_sequence)
    return combined_sequence 

def find_amino_acids(position):
    amino_acids = []
    for data in sequence_data:
        full_sequence = combine_regions(data)
        for i in range(int(data['redundancy'])):
            if position in full_sequence:
                amino_acids.append(full_sequence[position])
            else:
                amino_acids.append('Unused')
    return amino_acids 

def generate_positions():
    all_positions = set()
    for data in sequence_data:
        full_sequence = combine_regions(data)
        positions_used = list(full_sequence.keys())
        for position in positions_used:
            all_positions.add(position)
    position_list = sort_alphanumerically(list(all_positions))
    return position_list #list of all possible positions in order of occurence

position_list = generate_positions()

def amino_acid_percent(position):
    amino_acids = find_amino_acids(position)
    amino_acid_count = Counter(amino_acids)
    for amino_acid in amino_acid_count:
        frequency = (100*amino_acid_count[amino_acid])/redundant_sequences
        amino_acid_count[amino_acid] = round(frequency,2)
    amino_acid_frequency = dict(amino_acid_count)
    return amino_acid_frequency

for position in position_list:
    amino_acid_frequency = Counter(amino_acid_percent(position))
    top_3 = amino_acid_frequency.most_common(3)
    df = pd.DataFrame.from_records(top_3)
    # plot
    barWidth = 0.85
    names = ('A','B','C','D','E') #will be 'data set'
    # Create green Bars
    plt.bar(r, greenBars, color='#b5ffb9', edgecolor='white', width=barWidth)
    # Create orange Bars
    plt.bar(r, orangeBars, bottom=greenBars, color='#f9bc86', edgecolor='white', width=barWidth)
    # Create blue Bars
    plt.bar(r, blueBars, bottom=[i+j for i,j in zip(greenBars, orangeBars)], color='#a3acff', edgecolor='white', width=barWidth)
 
# Custom x axis
plt.xticks(r, names)
plt.xlabel("group")
 
# Show graphic
plt.show()

